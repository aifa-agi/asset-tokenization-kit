// File: @/components/admin/asset-create-form.tsx
// Description: Complete form for creating new property tokens
// Features: Image upload, blockchain deployment, DB save, auto-redirect

'use client'

import { useState, useEffect } from 'react'
import { useWeb3Status } from '@/providers/web-3-provider'
import { toast } from 'sonner'
import { CreateTokenParams, usePropertyTokenFactory } from '@/lib/hooks/use-property-token-factory'

export function AssetCreateForm() {
  const { address, isConnected } = useWeb3Status()
  const {
    createToken,
    isCreating,
    isConfirmed,
    newTokenAddress,
    txHash,
    error,
    reset,
  } = usePropertyTokenFactory()

  const [formData, setFormData] = useState<CreateTokenParams>({
    name: '',
    symbol: '',
    maxSupply: '',
    pricePerToken: '',
    description: '',
    imageURI: '',  // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ
  })

  const [imageFile, setImageFile] = useState<File | null>(null)
  const [imagePreview, setImagePreview] = useState<string | null>(null)
  const [uploadedImageUrl, setUploadedImageUrl] = useState<string | null>(null)
  const [isSaving, setIsSaving] = useState(false)

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target
    setFormData(prev => ({ ...prev, [name]: value }))
  }

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    if (file.size > 5 * 1024 * 1024) {
      toast.error('–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB')
      return
    }

    if (!file.type.startsWith('image/')) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
      return
    }

    setImageFile(file)

    const reader = new FileReader()
    reader.onloadend = () => {
      setImagePreview(reader.result as string)
    }
    reader.readAsDataURL(file)
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!isConnected || !address) {
      toast.error('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫')
      return
    }

    if (!formData.name || !formData.symbol || !formData.maxSupply || !formData.pricePerToken) {
      toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')
      return
    }

    try {
      let imageUrl: string | null = null

      // –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (imageFile) {
        toast.loading('–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...', { id: 'image-upload' })

        const uploadFormData = new FormData()
        uploadFormData.append('file', imageFile)

        const uploadRes = await fetch('/api/upload-image', {
          method: 'POST',
          body: uploadFormData,
        })

        if (!uploadRes.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
        }

        const uploadData = await uploadRes.json()
        imageUrl = uploadData.url
        setUploadedImageUrl(imageUrl)

        toast.success('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', { id: 'image-upload' })
      }

      // –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ blockchain
      toast.loading('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ blockchain...', { id: 'create-token' })

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞—ë–º imageURI –≤ hook
      const hash = await createToken({
        ...formData,
        imageURI: imageUrl || '',
      })

      toast.success('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', { id: 'create-token' })
      toast.loading('–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...', { id: 'confirm' })

    } catch (err: any) {
      console.error('Create asset error:', err)
      toast.error(err.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞')
      toast.dismiss('image-upload')
      toast.dismiss('create-token')
      toast.dismiss('confirm')
    }
  }

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  useEffect(() => {
    if (isConfirmed && newTokenAddress && !isSaving) {
      saveToDatabase()
    }
  }, [isConfirmed, newTokenAddress])

  const saveToDatabase = async () => {
    if (!newTokenAddress) return

    setIsSaving(true)
    toast.loading('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...', { id: 'save-db' })

    try {
      const response = await fetch('/api/assets/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contractAddress: newTokenAddress,
          name: formData.name,
          symbol: formData.symbol,
          description: formData.description,
          totalTokens: parseInt(formData.maxSupply),
          pricePerToken: parseFloat(formData.pricePerToken),
          imageUrl: uploadedImageUrl,
          createdBy: address,
        }),
      })

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î')
      }

      const asset = await response.json()

      toast.success('–ê–∫—Ç–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', { id: 'save-db' })
      toast.dismiss('confirm')

      console.log('‚úÖ –ê–∫—Ç–∏–≤ —Å–æ–∑–¥–∞–Ω:', asset)

      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        window.location.href = '/admin'
      }, 2000)

    } catch (err: any) {
      console.error('Save to DB error:', err)
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: ' + err.message, { id: 'save-db' })
    } finally {
      setIsSaving(false)
    }
  }

  const handleReset = () => {
    setFormData({
      name: '',
      symbol: '',
      maxSupply: '',
      pricePerToken: '',
      description: '',
      imageURI: '',
    })
    setImageFile(null)
    setImagePreview(null)
    setUploadedImageUrl(null)
    reset()
  }

  return (
    <div className="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-md">
      <h2 className="text-2xl font-bold text-gray-900 mb-6">
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
      </h2>

      <form onSubmit={handleSubmit} className="space-y-6">
        
        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
        <div>
          <label className="block text-sm font-semibold text-gray-900 mb-2">
            üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
          </label>

          {imagePreview ? (
            <div className="mb-4 relative">
              <img
                src={imagePreview}
                alt="Preview"
                className="w-full h-48 object-cover rounded-lg border-2 border-gray-200"
              />
              <button
                type="button"
                onClick={() => {
                  setImageFile(null)
                  setImagePreview(null)
                  setUploadedImageUrl(null)
                }}
                className="absolute top-2 right-2 bg-red-500 text-white px-3 py-1 rounded-md text-sm hover:bg-red-600"
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          ) : (
            <div className="mb-4 border-2 border-dashed border-gray-300 rounded-lg p-8 text-center bg-gray-50">
              <div className="text-4xl mb-2">üè†</div>
              <p className="text-sm text-gray-600 mb-2">
                –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
              </p>
              <p className="text-xs text-gray-500">
                PNG, JPG –¥–æ 5MB
              </p>
            </div>
          )}

          <input
            type="file"
            accept="image/*"
            onChange={handleImageChange}
            className="block w-full text-sm text-gray-700 bg-white border border-gray-300 rounded-md
              file:mr-4 file:py-2 file:px-4
              file:rounded-md file:border-0
              file:text-sm file:font-semibold
              file:bg-emerald-50 file:text-emerald-700
              hover:file:bg-emerald-100 cursor-pointer"
          />
          <p className="mt-2 text-xs text-gray-500">
            üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 800x600px, –º–∞–∫—Å 5MB
          </p>
        </div>

        {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
        <div>
          <label className="block text-sm font-semibold text-gray-900 mb-2">
            üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            name="name"
            value={formData.name}
            onChange={handleChange}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–æ–º–∏–∫ —É –º–æ—Ä—è"
            required
            className="w-full px-4 py-3 text-gray-900 bg-white border border-gray-300 rounded-md 
              focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500
              placeholder:text-gray-400"
          />
          <p className="mt-1 text-xs text-gray-500">
            üí° –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º
          </p>
        </div>

        {/* –°–∏–º–≤–æ–ª */}
        <div>
          <label className="block text-sm font-semibold text-gray-900 mb-2">
            üîñ –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            name="symbol"
            value={formData.symbol}
            onChange={handleChange}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: BEACH"
            required
            maxLength={10}
            className="w-full px-4 py-3 text-gray-900 bg-white border border-gray-300 rounded-md 
              focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500
              placeholder:text-gray-400 uppercase"
          />
          <p className="mt-1 text-xs text-gray-500">
            üí° –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ (BEACH, MTN, APT1). –î–æ 10 —Å–∏–º–≤–æ–ª–æ–≤
          </p>
        </div>

        {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ */}
        <div>
          <label className="block text-sm font-semibold text-gray-900 mb-2">
            üéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ <span className="text-red-500">*</span>
          </label>
          <input
            type="number"
            name="maxSupply"
            value={formData.maxSupply}
            onChange={handleChange}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 100"
            required
            min="1"
            className="w-full px-4 py-3 text-gray-900 bg-white border border-gray-300 rounded-md 
              focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500
              placeholder:text-gray-400"
          />
          <p className="mt-1 text-xs text-gray-500">
            üí° –ù–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π —Ä–∞–∑–¥–µ–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 —Ç–æ–∫–µ–Ω–æ–≤ = 100 —á–∞—Å—Ç–µ–π)
          </p>
        </div>

        {/* –¶–µ–Ω–∞ */}
        <div>
          <label className="block text-sm font-semibold text-gray-900 mb-2">
            üí∞ –¶–µ–Ω–∞ –∑–∞ 1 —Ç–æ–∫–µ–Ω (USDT) <span className="text-red-500">*</span>
          </label>
          <input
            type="number"
            name="pricePerToken"
            value={formData.pricePerToken}
            onChange={handleChange}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1.00"
            required
            min="0.01"
            step="0.01"
            className="w-full px-4 py-3 text-gray-900 bg-white border border-gray-300 rounded-md 
              focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500
              placeholder:text-gray-400"
          />
          <p className="mt-1 text-xs text-gray-500">
            üí° –¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ USDT (—Å—Ç–µ–π–±–ª–∫–æ–∏–Ω = $1)
          </p>
          {formData.maxSupply && formData.pricePerToken && (
            <p className="mt-2 text-sm font-medium text-emerald-600">
              üìä –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞: {(parseInt(formData.maxSupply) * parseFloat(formData.pricePerToken)).toFixed(2)} USDT
            </p>
          )}
        </div>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        <div>
          <label className="block text-sm font-semibold text-gray-900 mb-2">
            üìù –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
          </label>
          <textarea
            name="description"
            value={formData.description}
            onChange={handleChange}
            placeholder="–£—é—Ç–Ω—ã–π –¥–æ–º —Å –≤–∏–¥–æ–º –Ω–∞ –º–æ—Ä–µ, 3 —Å–ø–∞–ª—å–Ω–∏, —Ç–µ—Ä—Ä–∞—Å–∞..."
            rows={4}
            className="w-full px-4 py-3 text-gray-900 bg-white border border-gray-300 rounded-md 
              focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500
              placeholder:text-gray-400"
          />
          <p className="mt-1 text-xs text-gray-500">
            üí° –û–ø–∏—à–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
          </p>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex gap-3">
          <button
            type="submit"
            disabled={!isConnected || isCreating || isSaving}
            className="flex-1 py-4 px-6 bg-emerald-600 text-white text-lg font-semibold rounded-md
              hover:bg-emerald-700 disabled:bg-gray-400 disabled:cursor-not-allowed
              transition-all shadow-lg hover:shadow-xl"
          >
            {isCreating 
              ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...'
              : isSaving
              ? 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...'
              : isConfirmed
              ? '‚úÖ –ì–æ—Ç–æ–≤–æ!'
              : 'üöÄ –°–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤'}
          </button>

          {(isConfirmed || error) && (
            <button
              type="button"
              onClick={handleReset}
              className="px-6 py-4 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
            >
              –°–±—Ä–æ—Å–∏—Ç—å
            </button>
          )}
        </div>

        {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ */}
        {!isConnected && (
          <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-md">
            <p className="text-sm text-yellow-800">
              ‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ MetaMask –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞
            </p>
          </div>
        )}

        {/* –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
        {txHash && (
          <div className="p-4 bg-blue-50 border border-blue-200 rounded-md">
            <p className="text-sm font-medium text-blue-900 mb-2">
              üì° –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
            </p>
            <a
              href={`https://sepolia.etherscan.io/tx/${txHash}`}
              target="_blank"
              rel="noopener noreferrer"
              className="text-sm text-blue-600 hover:underline break-all"
            >
              {txHash}
            </a>
          </div>
        )}

        {/* –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ */}
        {newTokenAddress && (
          <div className="p-4 bg-green-50 border border-green-200 rounded-md">
            <p className="text-sm font-medium text-green-900 mb-2">
              üéâ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω!
            </p>
            <a
              href={`https://sepolia.etherscan.io/address/${newTokenAddress}`}
              target="_blank"
              rel="noopener noreferrer"
              className="text-sm text-green-600 hover:underline break-all"
            >
              {newTokenAddress}
            </a>
            <p className="text-xs text-green-700 mt-2">
              –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–∫—Ç–∏–≤–æ–≤...
            </p>
          </div>
        )}

        {/* –û—à–∏–±–∫–∞ */}
        {error && (
          <div className="p-4 bg-red-50 border border-red-200 rounded-md">
            <p className="text-sm font-medium text-red-900 mb-1">‚ùå –û—à–∏–±–∫–∞</p>
            <p className="text-sm text-red-800">{error.message}</p>
          </div>
        )}
      </form>
    </div>
  )
}
