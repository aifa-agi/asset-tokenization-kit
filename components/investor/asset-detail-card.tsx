// File: @/components/investor/asset-detail-card.tsx
// –û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤


'use client'

import { useState } from 'react'
import { useWeb3Status } from '@/providers/web-3-provider'
import { Address } from 'viem'
import { toast } from 'sonner'
import { sepolia } from 'wagmi/chains'
import { usePropertyToken } from '@/lib/hooks/use-property-token'

interface AssetDetailCardProps {
  contractAddress: Address
  name: string
  description?: string
  imageUrl?: string
}

export function AssetDetailCard({
  contractAddress,
  name,
  description,
  imageUrl,
}: AssetDetailCardProps) {
  const { 
    address, 
    isConnected, 
    chainId,
    switchToSepolia,
    isReady 
  } = useWeb3Status()
  
  const {
    symbol,
    formattedBalance,
    formattedTotalSupply,
    formattedMaxSupply,
    formattedRemainingSupply,
    formattedPricePerToken,
    mint,
    isWritePending,
    isConfirming,
    isConfirmed,
    txHash,
    isPaused,
    writeError,
    confirmError,
  } = usePropertyToken(contractAddress)

  const [buyAmount, setBuyAmount] = useState('1')
  const [txStatus, setTxStatus] = useState<'idle' | 'pending' | 'success' | 'error'>('idle')

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
  const handleBuy = async () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    if (!isConnected || !address) {
      toast.error('üîå –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–µ—Ç—å
    if (chainId !== sepolia.id) {
      toast.error('‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ Sepolia', {
        action: {
          label: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å',
          onClick: () => switchToSepolia(),
        },
      })
      return
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: Web3 –≥–æ—Ç–æ–≤
    if (!isReady) {
      toast.error('‚è≥ Web3 –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞ –ø–∞—É–∑–µ
    if (isPaused) {
      toast.error('‚è∏Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const amount = parseInt(buyAmount)
    if (isNaN(amount) || amount <= 0) {
      toast.error('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
      return
    }

    const remaining = parseInt(formattedRemainingSupply)
    if (amount > remaining) {
      toast.error(`‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${remaining} —Ç–æ–∫–µ–Ω–æ–≤`)
      return
    }

    // –ù–∞—á–∞–ª–æ –ø–æ–∫—É–ø–∫–∏
    setTxStatus('pending')

    try {
      const toastId = toast.loading(`üõí –ü–æ–∫—É–ø–∫–∞ ${amount} —Ç–æ–∫–µ–Ω–∞(–æ–≤)...`)

      const hash = await mint(address, buyAmount)

      toast.success('üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', { id: toastId })
      toast.loading('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...', { id: 'confirm' })

      console.log('‚úÖ Buy transaction:', hash)

    } catch (error: any) {
      console.error('‚ùå Buy error:', error)
      setTxStatus('error')

      // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
      if (error.message?.includes('User rejected') || error.message?.includes('denied')) {
        toast.error('üö´ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
      } else if (error.message?.includes('insufficient')) {
        toast.error('üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–∞–∑–∞')
      } else if (error.message?.includes('Exceeds max supply')) {
        toast.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–ø—É—Å–∫')
      } else {
        toast.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: ' + (error.shortMessage || error.message))
      }

      toast.dismiss('confirm')
    }
  }

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
  if (isConfirmed && txStatus === 'pending') {
    setTxStatus('success')
    toast.success('‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω—ã!', { id: 'confirm' })
    
    setTimeout(() => {
      setTxStatus('idle')
    }, 3000)
  }

  // –†–∞—Å—á—ë—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  const totalCost = (parseFloat(formattedPricePerToken) * parseInt(buyAmount || '0')).toFixed(2)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
  const getButtonText = () => {
    if (isWritePending) return 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞...'
    if (isConfirming) return '‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...'
    if (txStatus === 'success') return '‚úÖ –£—Å–ø–µ—à–Ω–æ!'
    if (txStatus === 'error') return '‚ùå –û—à–∏–±–∫–∞'
    return '–ö—É–ø–∏—Ç—å'
  }

  const isButtonDisabled = 
    !isConnected || 
    !isReady || 
    chainId !== sepolia.id || 
    isWritePending || 
    isConfirming || 
    isPaused

  return (
    <div className="bg-white rounded-lg shadow-lg overflow-hidden">
      {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
      {imageUrl ? (
        <div className="w-full h-64 bg-gray-200">
          <img
            src={imageUrl}
            alt={name}
            className="w-full h-full object-cover"
          />
        </div>
      ) : (
        <div className="w-full h-64 bg-gradient-to-br from-emerald-400 to-blue-500 flex items-center justify-center">
          <span className="text-white text-6xl">üè†</span>
        </div>
      )}

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="p-6">
        <div className="flex justify-between items-start mb-4">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">{name}</h2>
            <p className="text-sm text-gray-500">{symbol}</p>
          </div>
          {isPaused && (
            <span className="px-3 py-1 bg-red-100 text-red-800 text-sm font-medium rounded">
              ‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            </span>
          )}
        </div>

        {/* –°—Ç–∞—Ç—É—Å—ã —Å–µ—Ç–∏ */}
        {!isConnected && (
          <div className="mb-4 p-3 bg-yellow-50 rounded-lg text-center">
            <p className="text-yellow-800 text-sm">üîå –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</p>
          </div>
        )}

        {isConnected && chainId !== sepolia.id && (
          <div className="mb-4 p-3 bg-orange-50 rounded-lg text-center">
            <p className="text-orange-800 text-sm mb-2">‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–µ—Ç—å</p>
            <button
              onClick={switchToSepolia}
              className="text-sm text-orange-600 hover:underline font-medium"
            >
              –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Sepolia
            </button>
          </div>
        )}

        {description && (
          <p className="text-gray-700 mb-6">{description}</p>
        )}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-2 gap-4 mb-6">
          <div className="p-4 bg-gray-50 rounded-lg">
            <p className="text-xs text-gray-600 mb-1">–¶–µ–Ω–∞ –∑–∞ —Ç–æ–∫–µ–Ω</p>
            <p className="text-xl font-bold text-emerald-600">
              {formattedPricePerToken} USDT
            </p>
          </div>

          <div className="p-4 bg-gray-50 rounded-lg">
            <p className="text-xs text-gray-600 mb-1">–î–æ—Å—Ç—É–ø–Ω–æ</p>
            <p className="text-xl font-bold text-gray-900">
              {formattedRemainingSupply} / {formattedMaxSupply}
            </p>
          </div>

          <div className="p-4 bg-gray-50 rounded-lg">
            <p className="text-xs text-gray-600 mb-1">–í–∞—à –±–∞–ª–∞–Ω—Å</p>
            <p className="text-xl font-bold text-blue-600">
              {formattedBalance}
            </p>
          </div>

          <div className="p-4 bg-gray-50 rounded-lg">
            <p className="text-xs text-gray-600 mb-1">–ü—Ä–æ–¥–∞–Ω–æ</p>
            <p className="text-xl font-bold text-gray-900">
              {formattedTotalSupply}
            </p>
          </div>
        </div>

        {/* –§–æ—Ä–º–∞ –ø–æ–∫—É–ø–∫–∏ */}
        <div className="border-t pt-6">
          <label className="block text-sm font-medium mb-2">
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
          </label>

          <div className="flex gap-2 mb-4">
            <input
              type="number"
              min="1"
              max={formattedRemainingSupply}
              value={buyAmount}
              onChange={(e) => setBuyAmount(e.target.value)}
              disabled={isButtonDisabled}
              className="flex-1 px-4 py-2 border border-gray-300 rounded-md
                focus:ring-2 focus:ring-emerald-500
                disabled:bg-gray-100 disabled:cursor-not-allowed"
            />

            <button
              onClick={handleBuy}
              disabled={isButtonDisabled}
              className={`px-6 py-2 font-semibold rounded-md transition-colors
                ${isButtonDisabled
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : txStatus === 'success'
                  ? 'bg-green-600 text-white'
                  : 'bg-emerald-600 text-white hover:bg-emerald-700'
                }`}
            >
              {getButtonText()}
            </button>
          </div>

          <p className="text-sm text-gray-600">
            –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:{' '}
            <span className="font-bold text-gray-900">{totalCost} USDT</span>
          </p>
        </div>

        {/* –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è */}
        {txHash && (
          <div className="mt-4 p-3 bg-blue-50 rounded-md">
            <p className="text-xs font-medium mb-1">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</p>
            <a
              href={`https://sepolia.etherscan.io/tx/${txHash}`}
              target="_blank"
              rel="noopener noreferrer"
              className="text-xs text-blue-600 hover:underline break-all"
            >
              {txHash}
            </a>
          </div>
        )}

        {/* Debug info (–∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏) */}
        {process.env.NODE_ENV === 'development' && (
          <div className="mt-4 p-2 bg-gray-100 rounded text-xs text-gray-600">
            <p>–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {contractAddress.slice(0, 10)}...</p>
            <p>–°–µ—Ç—å: {chainId === sepolia.id ? 'Sepolia ‚úÖ' : `ID: ${chainId}`}</p>
            <p>–ê–¥—Ä–µ—Å: {address ? address.slice(0, 6) + '...' : '–ù–µ –ø–æ–¥–∫–ª—é—á—ë–Ω'}</p>
          </div>
        )}
      </div>
    </div>
  )
}
