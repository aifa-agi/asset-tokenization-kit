// File: @/providers/Web3Provider.tsx
// –û–ø–∏—Å–∞–Ω–∏–µ: –§–∏–Ω–∞–ª—å–Ω—ã–π Provider —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ç–µ–º–æ–π –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ö—É–∫–∞–º–∏.
// Theme —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π enum –¥–ª—è borderRadius.
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ö—É–∫–∏ + –æ—Ç–¥–µ–ª—å–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Ö—É–∫–∏ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏.
// –ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Ö—É–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏–∑ 'wagmi' –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö.

'use client'

import {
  WagmiProvider,
  useAccount,
  useConnect,
  useDisconnect,
  usePublicClient,
  useWalletClient,
} from 'wagmi'
import {
  RainbowKitProvider,
  lightTheme,
} from '@rainbow-me/rainbowkit'
import { 
  QueryClientProvider 
} from '@tanstack/react-query'
import { 
  config, 
  queryClient,
  rainbowTheme 
} from '@/lib/web3/config'
import { ReactNode, useEffect } from 'react'
import { sepolia } from 'wagmi/chains'

// –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π CSS
import '@rainbow-me/rainbowkit/styles.css'

// Interface –¥–ª—è props
interface Web3ProviderProps {
  children: ReactNode
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function AutoConnectWallet() {
  const { isConnected } = useAccount()
  const { connect, connectors } = useConnect()
  
  useEffect(() => {
    if (isConnected || connectors.length === 0) return
    
    try {
      const savedData = localStorage.getItem('wagmi.store')
      if (savedData) {
        const parsed = JSON.parse(savedData)
        const savedConnectorId = parsed.state?.selectedConnectorId
        
        if (savedConnectorId) {
          const savedConnector = connectors.find(
            connector => connector.uid === savedConnectorId
          )
          
          if (savedConnector) {
            console.log(`üîÑ –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${savedConnector.name}`)
            connect({ connector: savedConnector })
          }
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error)
    }
  }, [isConnected, connect, connectors])
  
  return null
}

// –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ Web3 —Å—Ç–∞—Ç—É—Å–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
export function useWeb3Status() {
  const { 
    address, 
    isConnected, 
    chainId,
    chain 
  } = useAccount()
  
  const publicClient = usePublicClient({ 
    chainId: chainId || sepolia.id 
  })
  const walletClient = useWalletClient({ 
    chainId: chainId || sepolia.id 
  })
  const { disconnect } = useDisconnect()
  
  const isCorrectChain = chainId === sepolia.id
  const isReady = isConnected && isCorrectChain && publicClient && walletClient
  
  const networkName = chain?.name || 'Unknown'
  const explorerUrl = chain?.blockExplorers?.default.url || 'https://sepolia.etherscan.io'
  
  const switchToSepolia = async () => {
    if (typeof window === 'undefined' || !window.ethereum) {
      alert('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask –∏–ª–∏ –¥—Ä—É–≥–æ–π Web3 –∫–æ—à–µ–ª—ë–∫!')
      return
    }
    
    const chainIdHex = '0xaa36a7'
    const rpcUrl = process.env.NEXT_PUBLIC_RPC_URL || 'https://rpc.sepolia.org'
    
    try {
      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: chainIdHex }],
      })
      console.log('‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ Sepolia!')
    } catch (switchError: any) {
      if (switchError.code === 4902) {
        try {
          await window.ethereum.request({
            method: 'wallet_addEthereumChain',
            params: [{
              chainId: chainIdHex,
              chainName: 'Sepolia Test Network',
              nativeCurrency: {
                name: 'Sepolia Ether',
                symbol: 'ETH',
                decimals: 18
              },
              rpcUrls: [rpcUrl],
              blockExplorerUrls: ['https://sepolia.etherscan.io'],
            }],
          })
          console.log('‚úÖ Sepolia –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
        } catch (addError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Sepolia:', addError)
          alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Sepolia —Å–µ—Ç–∏')
        }
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', switchError)
      }
    }
  }
  
  return {
    isConnected,
    address: address || null,
    chainId,
    chain,
    networkName,
    explorerUrl,
    isCorrectChain,
    isReady,
    publicClient: publicClient || null,
    walletClient: walletClient || null,
    disconnect,
    switchToSepolia,
  }
}

// –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ç–µ–º–∞)
export function Web3Provider({ children }: Web3ProviderProps) {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>
        <RainbowKitProvider
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π enum –¥–ª—è borderRadius
          theme={lightTheme({
            accentColor: rainbowTheme.lightMode.accentColor,
            accentColorForeground: rainbowTheme.lightMode.accentColorForeground,
            borderRadius: 'medium', // Enum –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è RainbowKit v2
          })}
          initialChain={sepolia}
        >
          <AutoConnectWallet />
          {children}
        </RainbowKitProvider>
      </QueryClientProvider>
    </WagmiProvider>
  )
}

// –ë–ê–ó–û–í–´–ï —Ö—É–∫–∏ (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ wagmi)
export { 
  useAccount,
  useConnect, 
  useDisconnect, 
  usePublicClient, 
  useWalletClient,
}


