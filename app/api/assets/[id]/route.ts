// File: @/app/api/assets/[id]/route.ts
// –û–ø–∏—Å–∞–Ω–∏–µ: API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –ø–æ ID –∏–ª–∏ contractAddress
// URL: /api/assets/cuid123 –∏–ª–∏ /api/assets/0x...
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –û–±—ä–µ–∫—Ç Asset —Å transactions –∏ holders


import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/lib/db/prisma'

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params
    
    console.log('üì• Fetching asset:', id)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø ID (cuid –∏–ª–∏ contractAddress)
    const isAddress = id.startsWith('0x')
    
    // –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–∞
    const asset = await prisma.asset.findUnique({
      where: isAddress 
        ? { contractAddress: id }
        : { id },
      include: {
        transactions: {
          orderBy: { createdAt: 'desc' },
          take: 10, // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        },
        holders: {
          where: { balance: { gt: 0 } }, // –¢–æ–ª—å–∫–æ —Å –±–∞–ª–∞–Ω—Å–æ–º > 0
          orderBy: { balance: 'desc' },
        },
        _count: {
          select: {
            transactions: true,
            holders: true,
          },
        },
      },
    })
    
    if (!asset) {
      return NextResponse.json(
        { error: 'Asset not found' },
        { status: 404 }
      )
    }
    
    console.log('‚úÖ Asset found:', asset.id)
    
    return NextResponse.json(asset)
    
  } catch (error) {
    console.error('‚ùå Error fetching asset:', error)
    
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

// PUT endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params
    const body = await request.json()
    
    console.log('üì• Updating asset:', id, body)
    
    // –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const allowedFields = ['description', 'imageUrl', 'status']
    const updateData: any = {}
    
    for (const field of allowedFields) {
      if (body[field] !== undefined) {
        updateData[field] = body[field]
      }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞
    const asset = await prisma.asset.update({
      where: { id },
      data: updateData,
    })
    
    console.log('‚úÖ Asset updated:', asset.id)
    
    return NextResponse.json(asset)
    
  } catch (error) {
    console.error('‚ùå Error updating asset:', error)
    
    if (error instanceof Error && error.message.includes('Record to update not found')) {
      return NextResponse.json(
        { error: 'Asset not found' },
        { status: 404 }
      )
    }
    
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
