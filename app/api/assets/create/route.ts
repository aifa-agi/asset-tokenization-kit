// File: @/app/api/assets/create/route.ts
// –û–ø–∏—Å–∞–Ω–∏–µ: API endpoint –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç: contractAddress, name, description, totalTokens, pricePerToken, imageUrl, createdBy
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Asset


import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/lib/db/prisma'
import { z } from 'zod'

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const createAssetSchema = z.object({
  contractAddress: z.string().regex(/^0x[a-fA-F0-9]{40}$/, 'Invalid contract address'),
  name: z.string().min(3, 'Name must be at least 3 characters'),
  symbol: z.string().min(2, 'Symbol must be at least 2 characters').optional(),
  description: z.string().optional(),
  totalTokens: z.number().int().positive('Total tokens must be positive'),
  pricePerToken: z.number().positive('Price must be positive'),
  imageUrl: z.string().url().optional().nullable(),
  createdBy: z.string().regex(/^0x[a-fA-F0-9]{40}$/, 'Invalid creator address'),
})

export async function POST(request: NextRequest) {
  try {
    // –ü–∞—Ä—Å–∏–Ω–≥ body
    const body = await request.json()
    
    console.log('üì• Received asset creation request:', body)
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validatedData = createAssetSchema.parse(body)
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ contractAddress
    const existingAsset = await prisma.asset.findUnique({
      where: { contractAddress: validatedData.contractAddress },
    })
    
    if (existingAsset) {
      return NextResponse.json(
        { error: 'Asset with this contract address already exists' },
        { status: 409 }
      )
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ –≤ –ë–î
    const asset = await prisma.asset.create({
      data: {
        contractAddress: validatedData.contractAddress,
        name: validatedData.name,
        description: validatedData.description || null,
        imageUrl: validatedData.imageUrl || null,
        totalTokens: validatedData.totalTokens,
        pricePerToken: validatedData.pricePerToken,
        currency: 'USDT',
        createdBy: validatedData.createdBy,
        status: 'ACTIVE',
      },
    })
    
    console.log('‚úÖ Asset created in DB:', asset.id)
    
    // –í–æ–∑–≤—Ä–∞—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞
    return NextResponse.json(asset, { status: 201 })
    
  } catch (error) {
    console.error('‚ùå Error creating asset:', error)
    
    // –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Zod
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: 'Validation error', 
           details: error.issues 
        },
        { status: 400 }
      )
    }
    
    // –û—à–∏–±–∫–∞ Prisma (–Ω–∞–ø—Ä–∏–º–µ—Ä unique constraint)
    if (error instanceof Error && error.message.includes('Unique constraint')) {
      return NextResponse.json(
        { error: 'Asset already exists' },
        { status: 409 }
      )
    }
    
    // –û–±—â–∞—è –æ—à–∏–±–∫–∞
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
