// File: @/hooks/use-property-token-factory.ts
// –û–ø–∏—Å–∞–Ω–∏–µ: React —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PropertyTokenFactory –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
// –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏: createToken, getAllTokens, tokenBySymbol
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏


import { useReadContract, useWriteContract, useWaitForTransactionReceipt, usePublicClient } from 'wagmi'
import { Address, decodeEventLog } from 'viem'
import { useState, useEffect } from 'react'
import { propertyTokenFactoryABI } from '../web3/conntracts/property-token-factory'
import { CONTRACTS } from '../web3/conntracts/addresses'

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
 */
export interface CreateTokenParams {
  name: string           // –ù–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–î–æ–º–∏–∫ —É –º–æ—Ä—è")
  symbol: string         // –°–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä "HOUSE1")
  maxSupply: string      // –ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä "10")
  pricePerToken: string  // –¶–µ–Ω–∞ –∑–∞ —Ç–æ–∫–µ–Ω –≤ USDT (–Ω–∞–ø—Ä–∏–º–µ—Ä "1.0")
  description: string    // –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–∏–∫–∞
}

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PropertyTokenFactory
 * @returns –û–±—ä–µ–∫—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ Factory
 */
export function usePropertyTokenFactory() {
  const [txHash, setTxHash] = useState<`0x${string}` | undefined>()
  const [newTokenAddress, setNewTokenAddress] = useState<Address | null>(null)
  const publicClient = usePublicClient()
  
  // ==================== READ FUNCTIONS ====================
  
  // 1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
  const { 
    data: totalTokens,
    isLoading: isTotalTokensLoading,
    refetch: refetchTotalTokens 
  } = useReadContract({
    address: CONTRACTS.propertyTokenFactory,
    abi: propertyTokenFactoryABI,
    functionName: 'totalTokens',
    query: { staleTime: 30_000 },
  })
  
  // 2. –í—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (–º–∞—Å—Å–∏–≤ –∞–¥—Ä–µ—Å–æ–≤)
  const { 
    data: allTokens,
    isLoading: isAllTokensLoading,
    refetch: refetchAllTokens 
  } = useReadContract({
    address: CONTRACTS.propertyTokenFactory,
    abi: propertyTokenFactoryABI,
    functionName: 'getAllTokens',
    query: { staleTime: 30_000 },
  })
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ —Å–∏–º–≤–æ–ª—É
  const checkTokenExists = async (symbol: string): Promise<boolean> => {
    try {
      const result = await publicClient?.readContract({
        address: CONTRACTS.propertyTokenFactory,
        abi: propertyTokenFactoryABI,
        functionName: 'tokenExists',
        args: [symbol],
      })
      return result as boolean
    } catch (error) {
      console.error('Check token exists error:', error)
      return false
    }
  }
  
  // 4. –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –ø–æ —Å–∏–º–≤–æ–ª—É
  const getTokenBySymbol = async (symbol: string): Promise<Address | null> => {
    try {
      const result = await publicClient?.readContract({
        address: CONTRACTS.propertyTokenFactory,
        abi: propertyTokenFactoryABI,
        functionName: 'tokenBySymbol',
        args: [symbol],
      })
      
      const address = result as Address
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∞–¥—Ä–µ—Å –Ω–µ –Ω—É–ª–µ–≤–æ–π (—Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      if (address === '0x0000000000000000000000000000000000000000') {
        return null
      }
      
      return address
    } catch (error) {
      console.error('Get token by symbol error:', error)
      return null
    }
  }
  
  // ==================== WRITE FUNCTIONS ====================
  
  const { 
    writeContractAsync, 
    isPending: isWritePending,
    error: writeError 
  } = useWriteContract()
  
  // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { 
    isLoading: isConfirming,
    isSuccess: isConfirmed,
    error: confirmError,
    data: receipt 
  } = useWaitForTransactionReceipt({
    hash: txHash,
  })
  
  // –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è TokenCreated –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  useEffect(() => {
    if (isConfirmed && receipt) {
      try {
        // –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ TokenCreated –≤ –ª–æ–≥–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const tokenCreatedLog = receipt.logs.find(log => {
          try {
            const decoded = decodeEventLog({
              abi: propertyTokenFactoryABI,
              data: log.data,
              topics: log.topics,
            })
            return decoded.eventName === 'TokenCreated'
          } catch {
            return false
          }
        })
        
        if (tokenCreatedLog) {
          const decoded = decodeEventLog({
            abi: propertyTokenFactoryABI,
            data: tokenCreatedLog.data,
            topics: tokenCreatedLog.topics,
          })
          
          if (decoded.eventName === 'TokenCreated') {
            const tokenAddress = decoded.args.tokenAddress
            console.log('‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:', tokenAddress)
            setNewTokenAddress(tokenAddress)
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
        refetchTotalTokens()
        refetchAllTokens()
        
        // –°–±—Ä–æ—Å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          setTxHash(undefined)
          setNewTokenAddress(null)
        }, 5000)
        
      } catch (error) {
        console.error('Error parsing TokenCreated event:', error)
      }
    }
  }, [isConfirmed, receipt, refetchTotalTokens, refetchAllTokens])
  
  // ==================== CREATE TOKEN FUNCTION ====================
  
  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π PropertyToken –∫–æ–Ω—Ç—Ä–∞–∫—Ç
   * @param params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–∏–º–≤–æ–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞, –æ–ø–∏—Å–∞–Ω–∏–µ)
   * @returns Transaction hash
   */
  const createToken = async (params: CreateTokenParams): Promise<`0x${string}`> => {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      if (!params.name || params.name.length < 3) {
        throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞')
      }
      
      if (!params.symbol || params.symbol.length < 2) {
        throw new Error('–°–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞')
      }
      
      const maxSupplyNum = parseInt(params.maxSupply)
      if (isNaN(maxSupplyNum) || maxSupplyNum <= 0) {
        throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0')
      }
      
      const priceNum = parseFloat(params.pricePerToken)
      if (isNaN(priceNum) || priceNum <= 0) {
        throw new Error('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0')
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∞
      const exists = await checkTokenExists(params.symbol.toUpperCase())
      if (exists) {
        throw new Error(`–¢–æ–∫–µ–Ω —Å —Å–∏–º–≤–æ–ª–æ–º ${params.symbol} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
      }
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ü–µ–Ω—ã –≤ wei (USDT –∏–º–µ–µ—Ç 6 decimals)
      const priceInWei = BigInt(Math.floor(priceNum * 1_000_000)) // 6 decimals
      
      console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:', {
        name: params.name,
        symbol: params.symbol.toUpperCase(),
        maxSupply: BigInt(maxSupplyNum),
        pricePerToken: priceInWei,
        description: params.description,
      })
      
      // –í—ã–∑–æ–≤ createToken –≤ Factory –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
      const hash = await writeContractAsync({
        address: CONTRACTS.propertyTokenFactory,
        abi: propertyTokenFactoryABI,
        functionName: 'createToken',
        args: [
          params.name,
          params.symbol.toUpperCase(),
          BigInt(maxSupplyNum),
          priceInWei,
          params.description,
        ],
      })
      
      console.log('üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', hash)
      setTxHash(hash)
      return hash
      
    } catch (error) {
      console.error('‚ùå Create token error:', error)
      throw error
    }
  }
  
  // ==================== HELPER FUNCTIONS ====================
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ –∏–Ω–¥–µ–∫—Å—É
   */
  const getTokenByIndex = async (index: number): Promise<Address | null> => {
    try {
      const result = await publicClient?.readContract({
        address: CONTRACTS.propertyTokenFactory,
        abi: propertyTokenFactoryABI,
        functionName: 'getToken',
        args: [BigInt(index)],
      })
      return result as Address
    } catch (error) {
      console.error('Get token by index error:', error)
      return null
    }
  }
  
  /**
   * –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
   */
  const reset = () => {
    setTxHash(undefined)
    setNewTokenAddress(null)
  }
  
  // ==================== RETURN ====================
  
  return {
    // –î–∞–Ω–Ω—ã–µ Factory
    totalTokens: totalTokens ? Number(totalTokens) : 0,
    allTokens: (allTokens as Address[]) || [],
    
    // –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    createToken,
    
    // –§—É–Ω–∫—Ü–∏–∏ —á—Ç–µ–Ω–∏—è
    checkTokenExists,
    getTokenBySymbol,
    getTokenByIndex,
    
    // –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    isCreating: isWritePending || isConfirming,
    isWritePending,
    isConfirming,
    isConfirmed,
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
    txHash,
    newTokenAddress,
    
    // –û—à–∏–±–∫–∏
    writeError,
    confirmError,
    error: writeError || confirmError,
    
    // –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
    isLoading: isTotalTokensLoading || isAllTokensLoading,
    
    // Refetch —Ñ—É–Ω–∫—Ü–∏–∏
    refetchTotalTokens,
    refetchAllTokens,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    reset,
  }
}

// TypeScript —Ç–∏–ø—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
export type UsePropertyTokenFactoryReturn = ReturnType<typeof usePropertyTokenFactory>
